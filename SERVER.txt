1ro
parametricas.par_tipos_articulos
parametricas.par_tipos_preposicion
parametricas.par_tipos_super_administracion
------------------------------------------------
parametricas.par_administraciones_tributarias
------------------------------------------------

2do
------------------------------------------------
parametricas.par_subadministraciones_tributarias
------------------------------------------------

3ro
parametricas.par_medios_recepcion
parametricas.par_tipos_demandante
parametricas.par_tipos_documentos
seguridad.seg_regiones
parametricas.par_tipos_respuestas_administracion
parametricas.par_tipos_resoluciones
parametricas.par_tipos_procesos_centrales
parametricas.par_resultados_anulacion
------------------------------------------------
alzada.alzada.alz_recursos_alzada DDL
------------------------------------------------

4to
parametricas.par_tipos_actos
------------------------------------------------
alzada.alz_actos_impugnados DDL
------------------------------------------------

5to
parametricas.par_motivos_memorial DDL
------------------------------------------------
comunes.memoriales
------------------------------------------------

6to
------------------------------------------------
alzada.alz_interposiciones_jerarquico DDL
------------------------------------------------

7mo
parametricas.par_tipos_notificaciones
parametricas.par_tipos_actuaciones
------------------------------------------------
alzada.alz_actuaciones DDL
------------------------------------------------

8vo
parametricas.par_tipos_notificaciones
parametricas.par_tipos_actuaciones
------------------------------------------------
alzada.alz_notificaciones DDL
------------------------------------------------

9no
parametricas.par_tipos_impuestos
------------------------------------------------
alzada.alz_montos_alzada DDL
------------------------------------------------

10mo
------------------------------------------------
alzada.alz_representantes_at DDL
------------------------------------------------

11vo
------------------------------------------------
alzada.alz_recursos_alzada_representantes_at DDL
------------------------------------------------

12vo
------------------------------------------------
alzada.alz_representantes_sp DDL
------------------------------------------------

13vo
------------------------------------------------
alzada.alz_recursos_alzada_representantes_sp DDL
------------------------------------------------


OPCIONAL

seguridad.seg_cargos
seguridad.seg_personas
------------------------------------------------

------------------------------------------------







POR DEFECTO
-----------

1                      AS id_usuario_registra,
       GETDATE()              AS fecha_registra,
       NULL                   AS id_usuario_modifica,
       NULL                   AS fecha_modifica,
==================================================================
INSERTAR SECUENCIAS IDS FALTANTES
INSERT INTO TSS_ADMINISTRACIONES_TRIBUTARIAS
    (N_Codigo_Adm_Tri, C_Descripcion, C_Usuario, D_Fecha_Update, N_Estado)
VALUES (9, 'SEQUENCIA - 6', 'admin', GETDATE(), 0);

SELECT @@VERSION

SELECT *
FROM TSS_MONTOS
WHERE N_Codigo_Impuesto > 0;

select * from TSS_ACTOS_IMPUGNADOS WHERE C_Nro_Expediente = 'ARIT-TJA-0008/2012';

select * from TSS_ACTOS_IMPUGNADOS WHERE C_Numero = '---';
SELECT C_Nro_Expediente FROM TSS_RECURSOS_ALZADA WHERE C_Nro_Expediente = 'ARIT-BEN-0002/2010';
SELECT N_Codigo_Acto FROM TSS_ACTOS_IMPUGNADOS WHERE C_Nro_Expediente = 'ARIT-BEN-0002/2010';
SELECT * FROM TSS_MONTOS WHERE N_Codigo_Acto = 53;

select C_Nro_Expediente, count(C_Nro_Expediente) from TSS_ACTOS_IMPUGNADOS group by C_Nro_Expediente having count(C_Nro_Expediente) > 2

select count (t.C_Nro_Expediente) from (select C_Nro_Expediente from TSS_ACTOS_IMPUGNADOS group by C_Nro_Expediente) as t;


--TIPO IMPUESTO
SELECT TAT.C_Super_Adm_Tri, TAT.N_Codigo_Adm_Tri, TRA.N_Codigo_Subadm_Tri, m.C_Nro_Expediente
FROM TSS_MONTOS AS m
         INNER JOIN TSS_RECURSOS_ALZADA TRA on m.C_Nro_Expediente = TRA.C_Nro_Expediente
         INNER JOIN TSS_SUBADMINISTRACIONES_TRIBUTARIAS TST on TST.N_Codigo_Subadm_Tri = TRA.N_Codigo_Subadm_Tri
         INNER JOIN TSS_ADMINISTRACIONES_TRIBUTARIAS TAT on TAT.N_Codigo_Adm_Tri = TST.N_Codigo_Adm_Tri
where m.C_Nro_Expediente = 'ARIT-BEN-0002/2011';

--CONTAR
SELECT * FROM TSS_ACTOS_IMPUGNADOS
WHERE C_Nro_Expediente LIKE 'ARIT-BEN-%'

SELECT C_Nro_Expediente + ' ' FROM TSS_MONTOS
where C_Nro_Expediente like 'ARIT-BEN-%'

SELECT C_Nro_Expediente, N_Codigo_Acto, C_Numero 
FROM TSS_ACTOS_IMPUGNADOS
WHERE C_Nro_Expediente LIKE 'ARIT-CBA-%'
GROUP BY C_Nro_Expediente, N_Codigo_Acto, C_Numero

AUTOS
-----
select C_Nro_Expediente, N_Codigo_Tipo_Auto, D_Fecha_Emision
from TSS_AUTOS
where C_Nro_Expediente like 'ARIT-CBA-%/2010'
group by C_Nro_Expediente, N_Codigo_Tipo_Auto, D_Fecha_Emision
order by C_Nro_Expediente;

https://www.mssqltips.com/sqlservertip/2914/rolling-up-multiple-rows-into-a-single-row-and-column-for-sql-server-data/

select CAST(N_Codigo_Tipo_Auto AS varchar(10)) as auto,  (N_Codigo_Tipo_Auto + 1) as plus
from (select C_Nro_Expediente, N_Codigo_Tipo_Auto, D_Fecha_Emision
from TSS_AUTOS
where C_Nro_Expediente like 'ARIT-CBA-%/2010'
group by C_Nro_Expediente, N_Codigo_Tipo_Auto, D_Fecha_Emision
) as d
group by N_Codigo_Tipo_Auto
order by N_Codigo_Tipo_Auto;

--------------------------------------------
select *
from (select N_Codigo_Tipo_Auto
      from TSS_AUTOS
      group by N_Codigo_Tipo_Auto) as d
-- where d.N_Codigo_Tipo_Auto between 1 and 38
-- where d.N_Codigo_Tipo_Auto between 39 and 42
-- where d.N_Codigo_Tipo_Auto between 43 and 58
-- where d.N_Codigo_Tipo_Auto between 60 and 69
-- where d.N_Codigo_Tipo_Auto between 70 and 84
-- where d.N_Codigo_Tipo_Auto between 86 and 90
where d.N_Codigo_Tipo_Auto between 92 and 98
order by N_Codigo_Tipo_Auto;
--------------------------------------------

notificaciones
select * from TSS_NOTIFICACIONES
where C_Nro_Expediente like 'ARIT-CBA-%/2010';

-- Notificaciones por expediente
SELECT TRA.C_Nro_Expediente,
       (SELECT ta.C_Descripcion
        FROM TSS_TIPOS_AUTOS ta
        WHERE tn.N_Codigo_Tipo_Auto = ta.N_Codigo_Tipo_Auto) AS C_descripcion,
       ra.D_Fecha_Emision,
       tn.N_Codigo_Destinatario,
       tn.D_Fecha_Hora_Notificacion,
       tn.N_Codigo_Tipo_Not
FROM TSS_AUTOS AS ra
         INNER JOIN TSS_NOTIFICACIONES TN
                    ON (ra.C_Nro_Expediente = TN.C_Nro_Expediente AND
                        ra.N_Codigo_Tipo_Auto = TN.N_Codigo_Tipo_Auto AND
                        ra.D_Fecha_Emision = TN.D_Fecha_Emision)
         INNER JOIN TSS_RECURSOS_ALZADA TRA ON TRA.C_Nro_Expediente = ra.C_Nro_Expediente
WHERE ra.C_Nro_Expediente LIKE 'ARIT-CBA-0049/2010'
  AND TN.C_Nro_Expediente LIKE 'ARIT-CBA-0049/2010'
  AND TRA.C_Nro_Expediente LIKE 'ARIT-CBA-0049/2010'
ORDER BY ra.d_fecha_emision;


================================================= SISUT =================================================

create table recursos
(
    identificador         int identity
        constraint recursos_pk
            primary key nonclustered,
    numero_recurso_alzada varchar(50) not null,
    id                    int         not null
);

CREATE INDEX index_name_recursos
    ON recursos (numero_recurso_alzada);


create table representantes
(
    identificador int identity
        constraint representantes_pk
            primary key nonclustered,
    nombre_representante_at varchar(200) not null,
    id int not null
)
go

CREATE INDEX index_name_representantes
ON representantes (nombre_representante_at);


REPRESENTANTES - SP

create table legales
(
    identificador           int identity
        constraint legales_pk
            primary key nonclustered,
    nombre_representante_sp varchar(200) not null,
    id                      int          not null
)

CREATE INDEX index_name_legales
ON legales (nombre_representante_sp);


create table notificaciones_aux
(
    identificador int identity
        constraint notificaciones_aux_pk
            primary key nonclustered,
    numero_recurso_alzada varchar(250) not null,
    id int not null
)

CREATE INDEX index_name_actuaciones
ON notificaciones_aux (numero_recurso_alzada);

================================================= SISUT =================================================



================================================= ARITS =================================================

create table recursos_arit
(
    identificador         int identity
        constraint recursos_arit_pk
            primary key nonclustered,
    numero_recurso_alzada varchar(50) not null,
    id                    int         not null
);

CREATE INDEX index_name_recursos_arit
    ON recursos_arit (numero_recurso_alzada);


create table memoriales_temp
(
    identificador int identity
        constraint memoriales_temp_pk
            primary key nonclustered,
    numero_recurso_alzada varchar(250) not null,
    id int not null
);

CREATE INDEX index_name_memoriales_temp
ON memoriales_temp (numero_recurso_alzada);


create table documentos_aux
(
    identificador int identity
        constraint documentos_aux_pk
            primary key nonclustered,
    numero_recurso_alzada varchar(250) not null,
    id int not null
);

CREATE INDEX index_name_documentos_aux
ON documentos_aux (numero_recurso_alzada);



----------------------------------------
USE [bd_aritcba]
GO

DECLARE @return_value int

EXEC    @return_value = [dbo].[actualiza_idexp]
        @id_exp_anterior = N'ARIT-CBA-0130/2021 -1',
        @id_exp = N'ARIT-CBA-0130/2021-1'

SELECT  'Return Value' = @return_value

GO
----------------------------------------
s
AUXILIARES 


create table origenes
(
    id int identity
        constraint origenes_pk
            primary key nonclustered,
    usuario_origen varchar(50) not null,
    id_value int not null
);

create unique index origenes_usuario_origen_uindex
    on origenes (usuario_origen);



PARA CONTROL TIEMPO ACLARACION ACLARACION
=========================================

create table aclaraciones
(
    identificador int identity
        constraint aclaraciones_pk
            primary key nonclustered,
    numero_recurso_alzada varchar(150) not null,
    id int not null
);

CREATE INDEX index_name_aclaraciones_tiempo
ON aclaraciones (numero_recurso_alzada);

CSV, IMPORT 
select (select numero_recurso_alzada
        from alzada.alz_recursos_alzada ra
        where ra.id = a.id_recurso_alzada),
       a.id
from alzada.alz_aclaraciones a;

-----------------------------------------
select (select numero_recurso_alzada
        from alzada.alz_recursos_alzada ra
        where ra.id = a.id_recurso_alzada),
       a.id
from alzada.alz_aclaraciones a
where a.id_recurso_alzada = (
    select id
    from alzada.alz_recursos_alzada
    where numero_recurso_alzada = 'ARIT-CHQ-0010/2021'
);

WHERE (LTRIM(RTRIM(ct.id_exp)) LIKE 'ARIT-%-%/2021%' OR
       LTRIM(RTRIM(ct.id_exp)) LIKE 'ARIT-%-%/2022%')


---------------------------
--- solicitudes_procesos
---------------------------

create table request_process_aux
(
    identificador int identity
        constraint request_process_aux_pk
            primary key nonclustered,
    numero_recurso_alzada varchar(250) not null,
    id int not null
);

CREATE INDEX index_name_request_process_aux
ON request_process_aux (numero_recurso_alzada);

---------------------------
--- recursos_jerarquicos, FP_resolucion
---------------------------

create table resoluciones_jer
(
    identificador             int identity
        constraint resoluciones_jer_pk
            primary key nonclustered,
    Expediente                varchar(70) not null,
    Expediente_Jerarquico     varchar(250) not null,
    C_Razon_Social            nvarchar(500),
    Administracion_Tributaria varchar(300),
    FP_Resolucion             datetime
);

CREATE INDEX index_resoluciones_jer
    ON resoluciones_jer (Expediente_Jerarquico);
    

create table usuarios_jer
(
    id int identity
        constraint usuarios_jer_pk
            primary key nonclustered,
    usuario varchar(50) not null,
    id_value int not null
);

create unique index usuarios_jer_uindex
    on usuarios_jer (usuario);

SELECT DISTINCT LTRIM(RTRIM(C_Usuario)), 1 d
FROM TSS_EXPEDIENTES_ARCHIVO_JER EX
ORDER BY LTRIM(RTRIM(C_Usuario));

select login, id from
seguridad.seg_usuarios
where login in (
);

IMPORT CSV


create table recursos_jerarquicos
(
    identificador         int identity
        constraint recursos_jerarquicos_pk
            primary key nonclustered,
    numero_recurso_jerarquico varchar(50) not null,
    id                    int         not null
);

CREATE INDEX index_name_recursos_jerarquicos
    ON recursos_jerarquicos (numero_recurso_jerarquico);

select numero_recurso_jerarquico, id from jerarquico.jer_recursos_jerarquicos;

IMPORT CSV

--------------
TSS_MONTOS_JER
--------------

create table actos_jer
(
    identificador         int identity
        constraint actos_jer_pk
            primary key nonclustered,
    numero_recurso_jerarquico varchar(150) not null,
    id                    int         not null
);

CREATE INDEX index_name_actos_jer
    ON actos_jer (numero_recurso_jerarquico);


IMPORT CSV

select concat(temp.numero_recurso_alzada, ';', temp.id_tipo_acto, ';', temp.numero_acto) as dato,
       temp.id                                                                           as valor
from (select ai.id,
             (select ra.numero_recurso_jerarquico
              from jerarquico.jer_recursos_jerarquicos ra
              where ra.id = ai.id_recurso_jerarquico) as numero_recurso_alzada,
             ai.id_tipo_acto                          as id_tipo_acto,
             ai.numero_acto                           as numero_acto
      from jerarquico.jer_actos_impugnados ai) as temp
order by temp.id;


--------------
TSS_AUTOS_JER-
--------------

create table interposiciones_jer
(
    identificador         int identity
        constraint interposiciones_jer_pk
            primary key nonclustered,
    numero_recurso_jerarquico varchar(150) not null,
    id                    int         not null
);

CREATE INDEX index_name_interposiciones_jer
    ON interposiciones_jer (numero_recurso_jerarquico);


IMPORT CSV

select (select ra.numero_recurso_jerarquico
        from jerarquico.jer_recursos_jerarquicos ra
        where ra.id = ai.id_recurso_jerarquico) as numero_recurso_alzada,
       ai.id
from alzada.alz_interposiciones_jerarquico ai
order by ai.id;

----------------------
TSS_NOTIFICACIONES_JER
----------------------

create table notificaciones_jer
(
    identificador int identity
        constraint notificaciones_jer_pk
            primary key nonclustered,
    numero_recurso_jerarquico varchar(250) not null,
    id int not null
);

CREATE INDEX index_name_notificaciones_jer
ON notificaciones_jer (numero_recurso_jerarquico);


-------
CALIDAD
-------

create table recursos_jer_calidad
(
    identificador         int identity
        constraint recursos_jer_calidad_pk
            primary key nonclustered,
    numero_recurso_alzada varchar(50) not null,
    id                    int         not null
);

CREATE INDEX index_name_recursos_jer_calidad
    ON recursos_jer_calidad (numero_recurso_alzada);


create table origenes_calidad
(
    id int identity
        constraint origenes_calidad_pk
            primary key nonclustered,
    usuario_origen varchar(50) not null,
    id_value int not null
);

create unique index origenes_calidad_usuario_origen_uindex
    on origenes_calidad (usuario_origen);


SELECT descripcion,
       0         id_tipo_devolucion,
       1         estado,
       1         id_usuario_registra,
       GETDATE() fecha_registra,
       NULL      id_usuario_modifica,
       NULL      fecha_modifica
FROM tipos_observaciones
WHERE id > 3;

----

create table documentos_jer_aux
(
    identificador int identity
        constraint documentos_jer_aux_pk
            primary key nonclustered,
    numero_recurso_alzada varchar(250) not null,
    id int not null
);

CREATE INDEX index_name_documentos_jer_aux
ON documentos_jer_aux (numero_recurso_alzada);


create table memoriales_jer_temp
(
    identificador int identity
        constraint memoriales_jer_temp_pk
            primary key nonclustered,
    numero_recurso_alzada varchar(250) not null,
    id int not null
);

CREATE INDEX index_name_memoriales_jer_temp
ON memoriales_jer_temp (numero_recurso_alzada);


create table aclaraciones_jer
(
    identificador int identity
        constraint aclaraciones_jer_pk
            primary key nonclustered,
    numero_recurso_alzada varchar(150) not null,
    id int not null
);

CREATE INDEX index_name_aclaraciones_jer
ON aclaraciones_jer (numero_recurso_alzada);

select (select numero_recurso_jerarquico
        from jerarquico.jer_recursos_jerarquicos ra
        where ra.id = a.id_recurso_jerarquico),
       a.id
from jerarquico.jer_aclaraciones a;

