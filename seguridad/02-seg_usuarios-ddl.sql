-- nueva tabla
-- seguridad.seg_usuarios
create table seguridad.seg_usuarios
(
	id integer generated by default as identity
		constraint seg_usuarios_pkey
			primary key,
	password varchar(256) not null,
	login varchar(50) not null
		constraint login
			unique,
	activo smallint default 1 not null,
	id_usuario_registra integer not null,
	fecha_registra timestamp with time zone not null,
	id_usuario_modifica integer,
	fecha_modifica timestamp with time zone,
	id_persona integer not null
		constraint fk_personas_usuarios
			references seguridad.seg_personas
);
-- COMMENTS
comment on table seguridad.seg_usuarios is 'Tabla que almacena a los usuarios que tendrán acceso al sistema según su estado.';
comment on column seguridad.seg_usuarios.id is 'Llave primaria de la tabla';
comment on column seguridad.seg_usuarios.password is 'Contraseña encriptada';
comment on column seguridad.seg_usuarios.login is 'Login del usuario para acceder';
comment on column seguridad.seg_usuarios.activo is 'Indica si el registro estará activo en sistema 1=Activo 0= Inactivo';
comment on column seguridad.seg_usuarios.id_usuario_registra is 'Identificador del usuario que realiza el registro';
comment on column seguridad.seg_usuarios.fecha_registra is 'Fecha en la que se registra la información';
comment on column seguridad.seg_usuarios.id_usuario_modifica is 'Identificador del usuario que realiza modificaciones en el registro';
comment on column seguridad.seg_usuarios.fecha_modifica is 'Fecha en la que se realiza modificaciones a la información';
comment on column seguridad.seg_usuarios.id_persona is 'Identificador de la persona a la que correponde el usuario';
-- DDL
alter table seguridad.seg_usuarios owner to postgres;

-- truncar la tabla y reiniciar la sequencia
TRUNCATE TABLE seguridad.seg_usuarios RESTART IDENTITY CASCADE;

-- funcion
--=================================================================================================================--
CREATE OR REPLACE FUNCTION seguridad.seg_fun_insertar_usuario()
    RETURNS trigger AS
$$
DECLARE
    vClaveTemporal TEXT;
BEGIN
    vClaveTemporal :=
            'eyJpdiI6ImNLNGZwT1RZMWk1bWxOZGpWelJrSlE9PSIsInZhbHVlIjoieS9xN1llTzFzcGZhc29PeW0zL0lydz09IiwibWFjIjoiODI0NWZlMDc2YTE1NTI5OWJhNjFmODhjYjhlOWU2ZTQ4NjVhZTExMDU5ODQxNDdhNmRiMjc0MzYyMzY5OTA4ZSIsInRhZyI6IiJ9';
    INSERT INTO seguridad.seg_usuarios(password, login, activo, id_usuario_registra, fecha_registra,
                                       id_usuario_modifica, fecha_modifica, id_persona)
    VALUES (vClaveTemporal, split_part(NEW.email, '@', 1), NEW.activo, 1, current_date, null, null, NEW.id);
    RETURN NEW;
END;
$$
    LANGUAGE 'plpgsql';
--=================================================================================================================--

-- asociar a la tabla
--=================================================================================================================--
CREATE TRIGGER agregar_usuario
  AFTER INSERT
  ON seguridad.seg_personas
  FOR EACH ROW
  EXECUTE PROCEDURE seguridad.seg_fun_insertar_usuario();
--=================================================================================================================--

TRUNCATE TABLE seguridad.seg_personas RESTART IDENTITY CASCADE;
TRUNCATE TABLE seguridad.seg_usuarios RESTART IDENTITY CASCADE;